// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Hatchery",
    "title": "Hatchery",
    "version": "v1"
  },
  "host": "localhost:8182",
  "paths": {
    "/": {
      "get": {
        "description": "get names",
        "tags": [
          "name"
        ],
        "responses": {
          "200": {
            "description": "name info",
            "schema": {
              "$ref": "#/definitions/NameCollectionResponse"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      }
    },
    "/name": {
      "get": {
        "description": "get names by name",
        "tags": [
          "name"
        ],
        "responses": {
          "200": {
            "description": "name info",
            "schema": {
              "$ref": "#/definitions/NameCollectionResponse"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      },
      "post": {
        "description": "create name",
        "tags": [
          "name"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NameRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "name info",
            "schema": {
              "$ref": "#/definitions/NameResponse"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      }
    },
    "/name/all": {
      "get": {
        "description": "get names all",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "name"
        ],
        "responses": {
          "200": {
            "description": "all names info",
            "schema": {
              "$ref": "#/definitions/NameCollectionResponse"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      }
    },
    "/name/{nameId}": {
      "delete": {
        "description": "delete name",
        "tags": [
          "name"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Name ID",
            "name": "nameId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HatcheryError": {
      "description": "HatcheryError",
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "integer",
          "x-nullable": false
        },
        "detail": {
          "description": "a human-readable explanation specific to this occurrence of the problem.",
          "type": "string",
          "x-nullable": false,
          "example": "Value of ID must be an integer"
        }
      }
    },
    "NameCollectionResponse": {
      "description": "name collection",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NameResponse"
      }
    },
    "NameRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "NameResponse": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Hatchery",
    "title": "Hatchery",
    "version": "v1"
  },
  "host": "localhost:8182",
  "paths": {
    "/": {
      "get": {
        "description": "get names",
        "tags": [
          "name"
        ],
        "responses": {
          "200": {
            "description": "name info",
            "schema": {
              "$ref": "#/definitions/NameCollectionResponse"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      }
    },
    "/name": {
      "get": {
        "description": "get names by name",
        "tags": [
          "name"
        ],
        "responses": {
          "200": {
            "description": "name info",
            "schema": {
              "$ref": "#/definitions/NameCollectionResponse"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      },
      "post": {
        "description": "create name",
        "tags": [
          "name"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NameRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "name info",
            "schema": {
              "$ref": "#/definitions/NameResponse"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      }
    },
    "/name/all": {
      "get": {
        "description": "get names all",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "name"
        ],
        "responses": {
          "200": {
            "description": "all names info",
            "schema": {
              "$ref": "#/definitions/NameCollectionResponse"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      }
    },
    "/name/{nameId}": {
      "delete": {
        "description": "delete name",
        "tags": [
          "name"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Name ID",
            "name": "nameId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/HatcheryError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HatcheryError": {
      "description": "HatcheryError",
      "type": "object",
      "properties": {
        "code": {
          "description": "error code",
          "type": "integer",
          "x-nullable": false
        },
        "detail": {
          "description": "a human-readable explanation specific to this occurrence of the problem.",
          "type": "string",
          "x-nullable": false,
          "example": "Value of ID must be an integer"
        }
      }
    },
    "NameCollectionResponse": {
      "description": "name collection",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NameResponse"
      }
    },
    "NameRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "NameResponse": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}`))
}
