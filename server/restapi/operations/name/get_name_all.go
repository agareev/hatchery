// Code generated by go-swagger; DO NOT EDIT.

package name

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetNameAllHandlerFunc turns a function with the right signature into a get name all handler
type GetNameAllHandlerFunc func(GetNameAllParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNameAllHandlerFunc) Handle(params GetNameAllParams) middleware.Responder {
	return fn(params)
}

// GetNameAllHandler interface for that can handle valid get name all params
type GetNameAllHandler interface {
	Handle(GetNameAllParams) middleware.Responder
}

// NewGetNameAll creates a new http.Handler for the get name all operation
func NewGetNameAll(ctx *middleware.Context, handler GetNameAllHandler) *GetNameAll {
	return &GetNameAll{Context: ctx, Handler: handler}
}

/*GetNameAll swagger:route GET /name/all name getNameAll

get names all

*/
type GetNameAll struct {
	Context *middleware.Context
	Handler GetNameAllHandler
}

func (o *GetNameAll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetNameAllParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
